CREATE DATABASE schemaa ;
use schemaa ;

-- 1 
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);
INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES 
(1, 'Rahul', 'Sharma', 'rahul.sharma@example.com', '9876543210', 'Delhi, India', '2024-01-15'),
(2, 'Pooja', 'Verma', 'pooja.verma@example.com', '9123456789', 'Mumbai, India', '2023-12-10'),
(3, 'Amit', 'Kumar', 'amit.kumar@example.com', '9988776655', 'Bangalore, India', '2024-02-05'),
(4, 'Neha', 'Singh', 'neha.singh@example.com', '9871234567', 'Kolkata, India', '2023-11-20'),
(5, 'Suresh', 'Gupta', 'suresh.gupta@example.com', '8765432109', 'Chennai, India', '2025-03-01');
INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES 
(8, 'Sanjay', 'Patel', 'sanjay.patel@example.com', '7896541230', 'Ahmedabad, India', '2024-03-21'),
(9, 'Riya', 'Sharma', 'riya.sharma@example.com', '9785641230', 'Jaipur, India', '2024-03-22');

INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES (10, 'Aarav', 'Kapoor', 'aarav.kapoor@example.com', '9871234560', 'Pune, India', '2025-03-01');

INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES (11, 'Kavya', 'Mehta', 'kavya.mehta@example.com', '8765432198', 'Surat, India', '2025-02-01');




select* from customers;

-- 2
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL
);
INSERT INTO Products (product_id, product_name, category, price, stock_quantity) 
VALUES 
(1, 'Samsung Galaxy S23', 'Electronics', 79999.99, 50),
(2, 'Apple iPhone 14', 'Electronics', 89999.99, 30),
(3, 'Sony WH-1000XM4', 'Accessories', 29999.99, 100),
(4, 'Nike Running Shoes', 'Footwear', 4999.99, 200),
(5, 'Adidas Hoodie', 'Clothing', 2999.99, 150),
(6, 'HP Laptop', 'Electronics', 59999.99, 25),
(7, 'Wooden Dining Table', 'Furniture', 19999.99, 10),
(8, 'Samsung LED TV', 'Electronics', 45999.99, 40),
(9, 'Ray-Ban Sunglasses', 'Accessories', 7999.99, 75),
(10, 'Puma Sports T-shirt', 'Clothing', 1999.99, 300);



-- 3
CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    order_status VARCHAR(20) DEFAULT 'Pending',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);
INSERT INTO Orders (order_id, customer_id, order_date, total_amount, order_status) 
VALUES 
(1, 1, '2024-03-01', 87999.99, 'Shipped'),
(2, 2, '2024-03-05', 2999.99, 'Pending'),
(3, 3, '2024-03-07', 59999.99, 'Shipped'),
(4, 1, '2024-03-10', 4999.99, 'Pending'),
(5, 4, '2024-03-12', 7999.99, 'Shipped'),
(6, 2, '2024-03-15', 45999.99, 'Shipped'),
(7, 5, '2024-03-18', 19999.99, 'Pending'),
(8, 3, '2024-03-20', 29999.99, 'Shipped'),
(9, 4, '2024-03-22', 999.99, 'Pending'),
(10, 5, '2024-03-25', 9999.99, 'Shipped');



-- 4
CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE
);

INSERT INTO OrderDetails (order_id, product_id, quantity, unit_price) 
VALUES 
(1, 1, 1, 79999.99),  
(1, 3, 2, 29999.99),  
(2, 5, 1, 2999.99),   
(3, 6, 1, 59999.99), 
(5, 9, 1, 7999.99),   
(6, 8, 1, 45999.99),  
(7, 7, 1, 19999.99),
(9, 10, 5, 1999.99); 

-- 5
CREATE TABLE Payments (
    payment_id INT PRIMARY KEY,
    order_id INT,
    payment_date DATE,
    payment_amount DECIMAL(10,2),
    payment_method VARCHAR(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

INSERT INTO Payments (payment_id, order_id, payment_date, payment_amount, payment_method) VALUES
(1, 1, '2024-03-01', 1500.50, 'Credit Card'),
(2, 2, '2024-03-02', 2500.75, 'PayPal'),
(3, 3, '2024-03-03', 3200.00, 'Debit Card'),
(4, 4, '2024-03-04', 1800.25, 'Net Banking'),
(5, 5, '2024-03-05', 2750.40, 'Credit Card'),
(6, 6, '2024-03-06', 3050.60, 'UPI'),
(7, 6, '2024-03-07', 1250.80, 'Cash'),
(8, 8, '2024-03-08', 4000.00, 'Credit Card'),
(9, 9, '2024-03-09', 2200.35, 'PayPal'),
(10, 10, '2024-03-10', 1500.00, 'Debit Card');


-- 1. Find the Total Number of Orders for Each Customer
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(o.order_id) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_orders DESC;

-- 2. Find the Total Sales Amount for Each Product (Revenue per Product)
   SELECT 
    p.product_id, 
    p.product_name, 
    SUM(od.quantity * od.unit_price) AS total_sales
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_sales DESC;

-- 3. Find the Most Expensive Product Sold
SELECT 
    p.product_name, 
    od.unit_price AS highest_price
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
ORDER BY od.unit_price DESC
LIMIT 1;


-- 4. Get the List of Customers Who Have Placed Orders in the Last 30 Days
SELECT DISTINCT c.customer_id, c.first_name, c.last_name, c.email
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- 5. Calculate the Total Amount Paid by Each Customer
select c.customer_id, c.first_name,c.last_name,  SUM(p.payment_amount) as total_count 
from customers c 
join  orders o on c.customer_id = o.customer_id
join payments p on o.order_id=p.order_id
group by c.customer_id,c.first_name,c.last_name;


-- 6. Get the Number of Products Sold by Category
SELECT 
    p.category, 
    SUM(od.quantity) AS total_products_sold
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.category
ORDER BY total_products_sold DESC;

-- 7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)
SELECT 
    o.order_id, 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    o.order_date, 
    o.total_amount, 
    o.order_status
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_status = 'Pending'
ORDER BY o.order_date DESC;

-- 8. Find the Average Order Value (Total Order Amount / Number of Orders)
SELECT 
    SUM(total_amount) / COUNT(order_id) AS average_order_value
FROM Orders;

-- 9. List the Top 5 Customers Who Have Spent the Most Money
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(p.payment_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

-- 10. Find the Products That Have Never Been Sold
SELECT 
    p.product_id, 
    p.product_name, 
    p.category
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;





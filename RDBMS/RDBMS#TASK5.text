CREATE DATABASE  ZOMATO;
USE ZOMATO;

-- 1
CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2,1),
    AverageCostForTwo DECIMAL(10,2)
);
INSERT INTO Restaurants VALUES
(1, 'Spice Affair', 'Mumbai', 'Indian', 4.6, 800),
(2, 'Pasta Paradise', 'Mumbai', 'Italian', 4.2, 1200),
(3, 'Dragon Wok', 'Delhi', 'Chinese', 4.3, 900),
(4, 'Tandoori Treats', 'Mumbai', 'Indian', 4.7, 1000),
(5, 'La Pinoz', 'Mumbai', 'Italian', 4.5, 1100);

-- 2
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15),
    City VARCHAR(50),
    JoinDate DATE
);
INSERT INTO Customers VALUES
(1, 'Amit', 'Sharma', '9876543210', 'Mumbai', '2023-01-10'),
(2, 'Priya', 'Kapoor', '8765432109', 'Delhi', '2023-02-15'),
(3, 'Rahul', 'Verma', '7654321098', 'Mumbai', '2023-03-20');

-- 3
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10,2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
INSERT INTO Orders VALUES
(1, 1, 1, '2024-03-01', 800, 'Delivered'),
(2, 2, 3, '2024-03-02', 900, 'Cancelled'),
(3, 3, 2, '2024-03-05', 1200, 'Delivered');

-- 4
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2,1),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
INSERT INTO Reviews VALUES
(1, 1, 1, 5, 'Amazing food!', '2024-03-02'),
(2, 3, 2, 4.5, 'Great taste!', '2024-03-06');


-- 5
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10,2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
INSERT INTO Payments VALUES
(1, 1, 'Card', 800, '2024-03-01'),
(2, 3, 'Wallet', 1200, '2024-03-05');

-- 1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City 
FROM Restaurants
 WHERE Rating >= 4.5;


-- 2. Find the total number of orders placed by each customer.
SELECT CustomerID, COUNT(*) AS TotalOrders 
FROM Orders 
GROUP BY CustomerID;

-- 3. List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name FROM Restaurants
 WHERE CuisineType = 'Italian' 
 AND City = 'Mumbai';
 
 
-- 4. Calculate the total revenue generated by each restaurant from completed orders.
SELECT RestaurantID, SUM(OrderAmount) 
AS TotalRevenue FROM Orders 
WHERE OrderStatus = 'Delivered' 
GROUP BY RestaurantID;


-- 5. Retrieve the most recent order placed by each customer.
SELECT CustomerID, MAX(OrderDate) 
AS RecentOrder 
FROM Orders 
GROUP BY CustomerID;


-- 6. List customers who have not placed any orders yet.
SELECT CustomerID, FirstName, LastName 
FROM Customers 
WHERE CustomerID 
NOT IN (SELECT DISTINCT CustomerID FROM Orders);


-- 7. Identify the most reviewed restaurants.
SELECT RestaurantID, COUNT(*) 
AS TotalReviews 
FROM Reviews 
GROUP BY RestaurantID 
ORDER BY TotalReviews DESC LIMIT 1;

-- 8. Find the most preferred payment method.
SELECT PaymentMethod, COUNT(*) 
AS UsageCount FROM Payments 
GROUP BY PaymentMethod 
ORDER BY UsageCount DESC LIMIT 1;

-- 9. List the top 5 restaurants by total revenue.
SELECT RestaurantID, SUM(OrderAmount) 
AS Revenue FROM Orders 
WHERE OrderStatus = 'Delivered' 
GROUP BY RestaurantID 
ORDER BY Revenue DESC LIMIT 5;

-- 10. Show the details of all cancelled orders along with the customer's and restaurant's names
SELECT o.OrderID, c.FirstName, c.LastName, r.Name AS RestaurantName, o.OrderAmount 
FROM Orders o 
JOIN Customers c ON o.CustomerID = c.CustomerID 
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID 
WHERE o.OrderStatus = 'Cancelled';
